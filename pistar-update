#!/bin/bash
#
###############################################################################
#                                                                             #
#                        Pi-Star Auto Update Tool                             #
#                                                                             #
#    Version 3.7, Code, Design and Development by Andy Taylor (MW0MWZ).       #
#                                                                             #
#                     Make it simple to update the OS.                        #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
	echo -e "[!] ERROR: You need to be root to run this command...\n"
	exit 1
fi

exec 200>/var/lock/pistar-update.lock || exit 1
if ! flock -n 200 ; then
	echo -e "[!] ERROR: Another instance is already running...\n"
	exit 1
fi

git_checkUpdateRequired() {
	# Set the function variables
	gitFolder=${1}
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	gitBranch=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git rev-parse --abbrev-ref HEAD)

	# Git check / update function
	gitStatusRemote=$(git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | cut -c 1-7)
	gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log --pretty=format:"%h" -1 | cut -c 1-7)

	# Return the output
	if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
		echo "1"
	else
		echo "0"
	fi
}

git_update() {
	# Set the function variables
	gitFolder=${1}
	gitBranch=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git rev-parse --abbrev-ref HEAD)

	# Handle the special case for /usr/loca/sbin
	if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		# Assume unchanged for pistar-upnp.service
		git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --assume-unchanged pistar-upnp.service
	fi

	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
		# Show what we are doing
		echo "[INFO] Updating ${gitFolder} (Branch: ${gitBranch})..."

		# If this script is updated, re-run the update with the new version.
		if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
                        git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch origin ${gitBranch}
			if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep pistar-update 2>/dev/null)" = "pistar-update" ]; then
                                echo "[✓] Found a new version of pistar-update..."
				# Un-shallow Git Repo
				if [ -f ${gitFolder}/.git/shallow ]; then
					git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch --unshallow
				fi
				# Pull updates
                                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull origin ${gitBranch}
                                if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
                                        echo "[!] WARN: Update to new version of pistar-update was not successfull, forcing update..."
					rm -rf ${gitFolder}/pistar-upnp.service
                                        git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                                fi
                                echo "[✓] Restarting update process with the new version..."
                                exec "$0" "$@"
                                exit 1
			fi
                fi

		# Un-shallow Git Repo
		if [ -f ${gitFolder}/.git/shallow ]; then
			git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch --unshallow
		fi
		# Pull updates
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull origin ${gitBranch}

		# Re-check that the updates are now good
		if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
				rm -rf ${gitFolder}/pistar-upnp.service
			fi
			echo "[!] WARN: Updates were not successfull, reverting to Pi-Star original files..."
			git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/${gitBranch}
		fi
	else
		echo "[✓] No updates for ${gitFolder} (Branch: ${gitBranch}) available"
	fi
}

service_handle() {
	# What do we want do to?
	doWhat=${1}

	systemctl ${doWhat} pistar-watchdog.service > /dev/null 2>&1
	systemctl ${doWhat} pistar-remote.service > /dev/null 2>&1
	systemctl ${doWhat} dmrgateway.service > /dev/null 2>&1
	systemctl ${doWhat} dapnetgateway.service > /dev/null 2>&1
	systemctl ${doWhat} ircddbgateway.service > /dev/null 2>&1
	systemctl ${doWhat} timeserver.service > /dev/null 2>&1
	systemctl ${doWhat} ysfgateway.service > /dev/null 2>&1
	systemctl ${doWhat} ysf2dmr.service > /dev/null 2>&1
	systemctl ${doWhat} ysf2nxdn.service > /dev/null 2>&1
	systemctl ${doWhat} ysf2p25.service > /dev/null 2>&1
	systemctl ${doWhat} ysfparrot.service > /dev/null 2>&1
	systemctl ${doWhat} dmr2ysf.service > /dev/null 2>&1
	systemctl ${doWhat} dmr2nxdn.service > /dev/null 2>&1
        if [ -f /lib/systemd/system/m17gateway.service ]; then
            systemctl ${doWhat} m17gateway.service > /dev/null 2>&1
        fi
	systemctl ${doWhat} p25gateway.service > /dev/null 2>&1
	systemctl ${doWhat} p25parrot.service > /dev/null 2>&1
	systemctl ${doWhat} nxdngateway.service > /dev/null 2>&1
	systemctl ${doWhat} nxdn2dmr.service > /dev/null 2>&1
	systemctl ${doWhat} nxdnparrot.service > /dev/null 2>&1
	systemctl ${doWhat} dstarrepeater.service > /dev/null 2>&1
	if [ -f /etc/systemd/system/NextionDriver.service ]; then
            systemctl ${doWhat} NextionDriver.service > /dev/null 2>&1
        fi
	systemctl ${doWhat} mmdvmhost.service > /dev/null 2>&1 && sleep 2 > /dev/null 2>&1
}

screen_message() {
	# Send Feedback to Nextion Screen
	if [ -f /usr/local/sbin/pistar-nextiontext.py ]; then
	    /usr/local/sbin/pistar-nextiontext.py -c 2>/dev/null
	    /usr/local/sbin/pistar-nextiontext.py t0 "${1}" 2>/dev/null
	    /usr/local/sbin/pistar-nextiontext.py t2 "${2}" 2>/dev/null
	fi
	if [ -f /usr/local/sbin/pistar-oledtext.py ]; then
	    /usr/local/sbin/pistar-oledtext.py -c 2>/dev/null
	    /usr/local/sbin/pistar-oledtext.py "${1}" "${2}" 2>/dev/null
	fi
}

main_function() {
	# Make the disk writable
	if [ -d /boot/firmware ]; then
		$(mount -o remount,rw / >/dev/null 2>&1 </dev/null ; mount -o remount,rw /boot/firmware >/dev/null 2>&1 </dev/null)
	else
		$(mount -o remount,rw / >/dev/null 2>&1 </dev/null ; mount -o remount,rw /boot >/dev/null 2>&1 </dev/null)
	fi

	echo "[INFO] Stopping Services..."
	service_handle stop
	echo "[✓] Done"

	if [ -t 1 ]; then
		# This is running from a terminal, so it should be safe to update the OS
		echo -e "[INFO] Updating OS...\n"
		screen_message "OS Upgrades" "in progress.."
		apt-get update
		apt-get upgrade --fix-missing --fix-broken -y
		#apt-get clean
		screen_message "OS Upgrades" "done"
		echo "[✓] Done"

		echo "Checking nginx config"
		if ! [ -f /etc/systemd/system/nginx.service.d/override.conf ]; then
			if ! [ $(cat /lib/systemd/system/nginx.service | grep -o "mkdir") ]; then
				sed -i '\/PIDFile=\/run\/nginx.pid/a ExecStartPre=\/bin\/mkdir -p \/var\/log\/nginx' /lib/systemd/system/nginx.service
				systemctl daemon-reload
				systemctl restart nginx.service
				echo "[!] WARN: nginx config has been repaired - re-running pistar-update"
				screen_message "Webserver" "[!] Repaired"
	                        exec "$0" "$@"
				exit 1
			fi
		fi
	fi

	echo "[INFO] Updating DV Binaries..."
	screen_message "DV Binaries" "updating.."
	git_update /usr/local/bin
	echo "[✓] Done"

	echo "[INFO] Updating Pi-Star Binaries..."
	screen_message "CLI Tools" "updating.."
	git_update /usr/local/sbin
	echo "[✓] Done"

	echo "[INFO] Updating Hostfiles..."
	screen_message "Host Files" "updating.."
	/usr/local/sbin/HostFilesUpdate.sh > /dev/null 2>&1
	echo "[✓] Done"

	echo "[INFO] Updating Dashboard..."
	screen_message "Dashboard" "updating.."
	git_update /var/www/dashboard
	echo "[✓] Done"

	echo "[INFO] Updating PiStar-Firewall..."
	screen_message "Firewall" "updating.."
	pistar-firewall > /dev/null 2>&1
	echo "[✓] Done"

	# Pre-Fix some config in MMDVMHost for update purposes.
	mmdvmHostVer=`MMDVMHost -v | awk '{print $3}' | cut -c 1-8`
	needsUpdate=`grep -c Gwy /etc/mmdvmhost`
	if [ ${mmdvmHostVer} \> 20171031 ] && [ ${needsUpdate} \> 0 ]; then
	        # Config needs to be updated, add in the changes here
	        sed -i "/GwyAddress=/c\\GatewayAddress=127.0.0.1" /etc/mmdvmhost
	        sed -i "/GwyPort=/c\\GatewayPort=4200" /etc/mmdvmhost
	fi
	needsTypeLine=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Type=" | wc -l)
	dmrAddress=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Address=" | awk -F "=" '/Address=/ {print $2}')
	if [ ${needsTypeLine} \< 1 ]; then
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Gateway/g' /etc/mmdvmhost
		else
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Direct/g' /etc/mmdvmhost
		fi
	else
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i "/Type=Dire/c\\Type=Gateway" /etc/mmdvmhost
		else
			sed -i "/Type=Gate/c\\Type=Direct" /etc/mmdvmhost
		fi
	fi

	# Fix up new P25Gateway Config Hostfile setup
	if [[ $(/usr/local/bin/P25Gateway --version | awk '{print $3}' | cut -c -8) -gt "20180108" ]]; then
		sed -i 's/Hosts=\/usr\/local\/etc\/P25Hosts.txt/HostsFile1=\/usr\/local\/etc\/P25Hosts.txt\nHostsFile2=\/usr\/local\/etc\/P25HostsLocal.txt/g' /etc/p25gateway
	fi
	if [ ! -f /root/P25Hosts.txt ]; then
		touch /root/P25Hosts.txt
	fi

	# Fix up new NXDNGateway Config Hostfile setup
	if [[ $(/usr/local/bin/NXDNGateway --version | awk '{print $3}' | cut -c -8) -gt "20180801" ]]; then
		sed -i 's/HostsFile=\/usr\/local\/etc\/NXDNHosts.txt/HostsFile1=\/usr\/local\/etc\/NXDNHosts.txt\nHostsFile2=\/usr\/local\/etc\/NXDNHostsLocal.txt/g' /etc/nxdngateway
	fi
	if [ ! -f /root/NXDNHosts.txt ]; then
		touch /root/NXDNHosts.txt
	fi
	if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
		touch /usr/local/etc/NXDNHostsLocal.txt
	fi

	if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then
		echo "[INFO] Updating P25Gateway config..."
		echo "" >> /etc/p25gateway
		sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
		echo "[✓] Done"
	fi

	if [[ $(grep Version /etc/pistar-release | awk '{print $3}' | cut -c 1) -eq 4 ]]; then
        	if [[ $(cat /etc/ircddbgateway | grep -o "xlx" | wc -l) -eq 0 ]]; then
        	        echo "[INFO] Adding XLX Config to /etc/ircddbgateway"
        	        echo "xlxEnabled=0" >> /etc/ircddbgateway
        	        echo "xlxHostsFileUrl=http://xlxapi.rlx.lu/api.php?do=GetXLXDMRMaster" >> /etc/ircddbgateway
        	fi

		if [[ $(cat /etc/ircddbgateway | grep -o "mobileGPS" | wc -l) -eq 0 ]]; then
                	echo "[INFO] Adding MobileGPS Config to /etc/ircddbgateway"
                	echo "mobileGPSEnabled=0" >> /etc/ircddbgateway
                	echo "mobileGPSAddress=127.0.0.1" >> /etc/ircddbgateway
                	echo "mobileGPSPort=7834" >> /etc/ircddbgateway
        	fi

		if [[ $(cat /etc/dstarrepeater | grep -o "mmdvmRXInvert" | wc -l) -eq 0 ]]; then
        	        echo "[INFO] Adding better MMDVM Config to /etc/dstarrepeater"
        	        echo "mmdvmRXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmPTTInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXDelay=50" >> /etc/dstarrepeater
        	        echo "mmdvmRXLevel=100" >> /etc/dstarrepeater
        	        echo "mmdvmTXLevel=100" >> /etc/dstarrepeater
        	fi
	fi

	# Check if /usr/bin/python exists
	if [[ ! -f /usr/bin/python ]] && [[ -f /usr/bin/python2.7 ]]; then
		ln -sf /usr/bin/python2.7 /usr/bin/python
	fi

	# Patch CRDA
	if [[ ! -f /lib/crda/regulatory.bin && ! -f /lib/crda/db.txt ]]; then
		curl --fail -o /lib/crda/db.txt -s https://www.pistar.uk/downloads/wireless_crda_db.txt
	fi

	#
	# Patch WiringPi and add python3-serial
	#
	pistarCurVersion=$(awk -F "= " '/Version/ {print $2}' /etc/pistar-release)
	wiringpiCurVersion=$(dpkg -s wiringpi 2>/dev/null | grep '^Version' | awk '{print $2}')

	# Check if WiringPi is installed or needs update
	shouldUpdateWiringPi=false
	if [ -z "$wiringpiCurVersion" ]; then
		shouldUpdateWiringPi=true
	elif dpkg --compare-versions "$wiringpiCurVersion" lt "3.14"; then
		shouldUpdateWiringPi=true
	fi
	
	# Logic based on Pi-Star version
	if dpkg --compare-versions "$pistarCurVersion" ge "4.3"; then
		if [ "$shouldUpdateWiringPi" = true ]; then
			echo "[INFO] Downloading WiringPi 3.14 (armhf)..."
			curl --fail -L -s -o /tmp/wiringpi_3.14_armhf.deb https://github.com/WiringPi/WiringPi/releases/download/3.14/wiringpi_3.14_armhf.deb --user-agent "Pi-Star_${pistarCurVersion}"
			dpkg -i /tmp/wiringpi_3.14_armhf.deb
			rm -rf /tmp/wiringpi_3.14_armhf.deb
		fi
		if ! dpkg -l | grep -q "python3-serial"; then
			echo "[INFO] python3-serial is not installed. Installing..."
			apt-get update
			apt-get install -y python3-serial
		fi
		if ! dpkg -l | grep -q "python3-luma.oled"; then
			echo "[INFO] python3-luma.oled is not installed. Installing..."
			apt-get update
			apt-get install -y python3-luma.oled
		fi
	elif dpkg --compare-versions "$pistarCurVersion" ge "4.2" && dpkg --compare-versions "$pistarCurVersion" lt "4.3"; then
		if [ "$shouldUpdateWiringPi" = true ]; then
			echo "[INFO] Downloading WiringPi 3.14 (bullseye)..."
			curl --fail -L -s -o /tmp/wiringpi_3.14_bullseye_armhf.deb https://github.com/WiringPi/WiringPi/releases/download/3.14/wiringpi_3.14_bullseye_armhf.deb --user-agent "Pi-Star_${pistarCurVersion}"
			dpkg -i /tmp/wiringpi_3.14_bullseye_armhf.deb
			rm -rf /tmp/wiringpi_3.14_bullseye_armhf.deb
		fi
		if ! dpkg -l | grep -q "python3-serial"; then
			echo "[INFO] python3-serial is not installed. Installing..."
			apt-get update
			apt-get install -y python3-serial
		fi
	fi

	echo "[INFO] Starting Services..."
	screen_message "Updates" "Complete!"
	service_handle start
	echo "[✓] Done"

	echo "[✓] Updates complete, syncing disk cache before making the disk Read-Only"
	# Make the disk read-only
	/bin/sync
	/bin/sync
	/bin/sync
	if [ -d /boot/firmware ]; then
		$(mount -o remount,ro / >/dev/null 2>&1 </dev/null ; mount -o remount,ro /boot/firmware >/dev/null 2>&1 </dev/null)
	else
		$(mount -o remount,ro / >/dev/null 2>&1 </dev/null ; mount -o remount,ro /boot >/dev/null 2>&1 </dev/null)
	fi

	# Tell the user we are done
	echo "[INFO] Finished"
}

if [ -t 1 ]; then
	# run via terminal, only output to screen
	main_function
else
	# if not run via terminal, log everything into a log file
	if [ ! -d /var/log/pi-star ]; then
		mkdir -p /var/log/pi-star
	fi
	main_function >> /var/log/pi-star/pi-star_update.log 2>&1
fi

exit 0
