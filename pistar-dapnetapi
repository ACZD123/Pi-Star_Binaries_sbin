#!/bin/bash
#
##############################################################################
#                                                                            #
#                         Pi-Star DAPNET API Tool                            #
#                                                                            #
#     Version 2.0, Code, Design and Development by Andy Taylor (MW0MWZ).     #
#       Helpfull input from Florian Wolters (DF2FET) - Thank you Flo.        #
#                                                                            #
##############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

# Get the stored DAPNET API Config
DAPNETAPIFile=/etc/dapnetapi.key
if [ -f ${DAPNETAPIFile} ]; then
        USER=$(grep -m 1 'USER=' ${DAPNETAPIFile} | awk -F "=" '/USER/ {print $2}')
        PASS=$(grep -m 1 'PASS=' ${DAPNETAPIFile} | awk -F "=" '/PASS/ {print $2}')
        TRXAREA=$(grep -m 1 'TRXAREA=' ${DAPNETAPIFile} | awk -F "=" '/TRXAREA/ {print $2}')
else
        echo "Unable to find your DAPNET API Info, no API commands available."
        exit 0
fi

if [ -z "$2" ]
then
	echo ""
	echo "To use this script, call the script with some arguments;"
	echo "Example:"
	echo "pistar-dapnetapi M1ABC \"Test Message\""
	echo "The above command will send a page containing \"Text Message\" to MW0MWZ"
	echo ""
	echo "For additional feedback add the \"debug\" option:"
	echo "pistar-dapnetapi M1ABC \"Test Message\" debug"
	echo "Suppress the hostname with the \"nohost\" option:"
	echo "pistar-dapnetapi M1ABC \"Test Message\" nohost"
	echo ""
	exit 0
fi

# Check some options
if [ "${3^^}" = "DEBUG" ] || [ "${4^^}" = "DEBUG" ]; then
	DEBUG="1"
else
	DEBUG="0"
fi

if [ "${3^^}" = "NOHOST" ] || [ "${4^^}" = "NOHOST" ]; then
	HOST=${USER^^}
else
	HOST=$(hostname)
fi

# Setup some variables
APIURL="https://hampager.de/api"
RECIPIENT="${1}"
MESSAGE=${2}
SIZEHOST=${#HOST}
SIZEMESSAGE=$(expr 78 - ${SIZEHOST})
SIZETEXT=${#MESSAGE}
NUMMESSAGES=$(expr ${SIZETEXT} / ${SIZEMESSAGE})

send_page () {
	# Set the variables for the function
	TEXT="${1}"

	# Debug option
	if [ "${DEBUG}" -gt "0" ]; then
	        echo " Request to DAPNET API: {"
	        echo "  \"text\": \"${HOST^^}: ${TEXT}\","
	        echo "  \"callSignNames\": ["
	        echo "    \"${RECIPIENT}\""
	        echo "  ],"
	        echo "  \"transmitterGroupNames\": ["
	        echo "    \"${TRXAREA}\""
	        echo "  ],"
	        echo "  \"emergency\": false"
	        echo "}"
	        echo ""
	        echo ""
	fi

	# Speak to DAPNET
	RESULT=$(curl -s -H "Content-Type: application/json" -X POST -u ${USER}:${PASS} -d \
	        "{ \"text\": \"${HOST^^}: ${TEXT}\", \"callSignNames\": [\"${RECIPIENT}\"], \"transmitterGroupNames\": [\"${TRXAREA}\"], \"emergency\": false }" \
	        ${APIURL}/calls )

	# Debug option
	if [ "${DEBUG}" -gt "0" ]; then
	        echo "Answer from DAPNET API: ${RESULT}"
	        echo ""
	        echo ""
	fi
}


if [ "${NUMMESSAGES}" -gt "0" ]; then
	# OK now I know I need to split the message, now I need to know now many I need.
	SIZEMESSAGESPLIT=$(expr 73 - ${SIZEHOST})
	NUMMESSAGESSPLIT=$(expr ${SIZETEXT} / ${SIZEMESSAGESPLIT} + 1)

	# Limit output to 5 concurrent messages
	if [ "${NUMMESSAGESSPLIT}" -ge "6" ]; then
		NUMMESSAGESSPLIT=5
	fi

	# Now I need to split the message into ${NUMMESSAGESSPLIT} chunks
	COUNTER=1
	while [ ${COUNTER} -le ${NUMMESSAGESSPLIT} ]; do
		TXTSTART=$(expr ${SIZEMESSAGESPLIT} \* ${COUNTER} - ${SIZEMESSAGESPLIT})
		TXTPRE="${COUNTER}/${NUMMESSAGESSPLIT}"
		TXTCHUNK=${MESSAGE:$TXTSTART:$SIZEMESSAGESPLIT}
		TXTMESSAGE=${TXTPRE}" "${TXTCHUNK}

		send_page "${TXTMESSAGE}"

		let COUNTER=COUNTER+1
	done
else
	# Messge does not need to be split
	send_page "${MESSAGE}"
fi


# Exit Clean
exit 0
