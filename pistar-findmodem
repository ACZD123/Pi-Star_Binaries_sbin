#!/bin/bash
#
##############################################################################
#                                                                            #
#                         Pi-Star Find Modem Tool.                           #
#                                                                            #
#     Version 1.0, Code, Design and Development by Andy Taylor (MW0MWZ).     #
#                                                                            #
#              Make it simple to find the attached MMDVM Modem               #
#                                                                            #
##############################################################################
#
# Kill any MMDVMHost or DStarRepeater processes
if [[ $(/usr/bin/pgrep MMDVMHost) ]]; then
        systemctl stop mmdvmhost > /dev/null 2>&1
        svcRestart=mmdvmhost
fi
if [[ $(/usr/bin/pgrep dstarrepeaterd) ]]; then
        systemctl stop dstarrepeaterd > /dev/null 2>&1
        svcRestart=dstarrepeaterd
fi

# Random Filename
randomFilename=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

# Find all the possible devices (only looking at /dev/ttyAMA* /dev/ttyACM* /dev/ttyS* and /dev/ttyUSB*)
for modemDevice in $(find /dev/tty* ! -type l | grep -E "tty(AMA|ACM|USB|S)."); do
        # Ignore the /dev/ttyS[0-3] ports on the Odroid Platform.
        if [[ $(platformDetect.sh) == *"Odroid"* && ${modemDevice} == *"ttyS"* && ${modemDevice} != *"ttySAC"* ]]; then
                continue
        fi

        # Send the MMDVM "Get Version" command to test the ports.
        touch /tmp/${randomFilename}                    # Make the output File
        stty -F ${modemDevice} 115200 raw -echo         # Configure the serial port, its always 115200
        exec 3<${modemDevice}                           # Redirect the output from serial to file descriptor 3
        cat <&3 > /tmp/${randomFilename} &              # Get the content of FD3 and punt it to a file
        PID=$!                                          # Save the PID for the cat command, to dump it later
        echo -en '\xE0\x03\x00' > ${modemDevice}        # Send the "Get Version" command to the port
        sleep 0.2s                                      # Wait for a responce
        kill -9 $PID > /dev/null 2>&1                   # Kill the cat!
        exec 3<&- 1> /dev/stdout 2> /dev/null           # Free up FD3

        # Read the output, and make it pretty for humans...
        if [[ $(cat /tmp/${randomFilename} | wc -c) -ge 1 ]]; then
                # OK we have some output, clean up the modem version string and remove non-printables
                modemData=$(tr -cd '\11\12\15\40-\176' < /tmp/${randomFilename} | sed 's/^.MMDVM/MMDVM/g')

                # OK we have some output, format it into somthing useful.
                if [[ $(grep "MMDVM_HS" /tmp/${randomFilename}) && ${modemDevice} == *"ttyAMA"* ]]; then
                        echo -e "Detected MMDVM_HS (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM_HS" /tmp/${randomFilename}) && ${modemDevice} == *"ttyS"* ]]; then
                        echo -e "Detected MMDVM_HS (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM_HS" /tmp/${randomFilename}) && ${modemDevice} == *"ttyACM"* ]]; then
                        echo -e "Detected MMDVM_HS (USB)  : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM_HS" /tmp/${randomFilename}) && ${modemDevice} == *"ttyUSB"* ]]; then
                        echo -e "Detected MMDVM_HS (USB)  : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM" /tmp/${randomFilename}) && ${modemDevice} == *"ttyAMA"* ]]; then
                        echo -e "Detected MMDVM    (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM" /tmp/${randomFilename}) && ${modemDevice} == *"ttyS"* ]]; then
                        echo -e "Detected MMDVM    (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM" /tmp/${randomFilename}) && ${modemDevice} == *"ttyACM"* ]]; then
                        echo -e "Detected MMDVM    (USB)  : ${modemDevice} (${modemData})"
                elif [[ $(grep "MMDVM" /tmp/${randomFilename}) && ${modemDevice} == *"ttyUSB"* ]]; then
                        echo -e "Detected MMDVM    (USB)  : ${modemDevice} (${modemData})"
                elif [[ $(grep "DVMEGA" /tmp/${randomFilename}) && ${modemDevice} == *"ttyAMA"* ]]; then
                        echo -e "Detected DVMEGA   (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "DVMEGA" /tmp/${randomFilename}) && ${modemDevice} == *"ttyS"* ]]; then
                        echo -e "Detected DVMEGA   (GPIO) : ${modemDevice} (${modemData})"
                elif [[ $(grep "DVMEGA" /tmp/${randomFilename}) && ${modemDevice} == *"ttyACM"* ]]; then
                        echo -e "Detected DVMEGA   (USB)  : ${modemDevice} (${modemData})"
                elif [[ $(grep "DVMEGA" /tmp/${randomFilename}) && ${modemDevice} == *"ttyUSB"* ]]; then
                        echo -e "Detected DVMEGA   (USB)  : ${modemDevice} (${modemData})"
                fi
        else
                # This port is not connected to an MMDVM Board, try Nextion Protocol
                stty -F ${modemDevice} 9600 raw -echo           # Configure the serial port, its always 9600
                exec 3<${modemDevice}                           # Redirect the output from serial to file descriptor 3
                cat <&3 > /tmp/${randomFilename} &              # Get the content of FD3 and punt it to a file
                PID=$!                                          # Save the PID for the cat command, to dump it later
                echo -en '\xFF\xFF\xFF' > ${modemDevice}        # Send the "Clear" command to the port
                echo -en 'connect' > ${modemDevice}             # Send the "Connect" command to the port
                echo -en '\xFF\xFF\xFF' > ${modemDevice}        # Send the "Clear" command to the port
                sleep 0.2s                                      # Wait for a responce
                kill -9 $PID > /dev/null 2>&1                   # Kill the cat!
                exec 3<&- 1> /dev/stdout 2> /dev/null           # Free up FD3

                # Read the output, and make it pretty for humans...
                if [[ $(cat /tmp/${randomFilename} | wc -c) -ge 1 ]]; then
                        # OK we have some output, clean up the string and remove non-printables
                        nextionData=$(tr -cd '\11\12\15\40-\176' < /tmp/${randomFilename})

                        # OK we have some output, format it into somthing useful.
                        # comok 1,37697-0,NX3224T024_011R,99,61488,DE6788B2935E5731,4194304???
                        if [[ $(grep "comok" /tmp/${randomFilename}) && ${nextionData} == *"NX"* ]]; then
                                nextionModel=$(echo ${nextionData} | awk -F',' '{print $3}')
                                nextionTouch=$(echo ${nextionData} | awk -F',' '{print $1}')
                                nextionFirmware=$(echo ${nextionData} | awk -F',' '{print $4}')
                                nextionMCU=$(echo ${nextionData} | awk -F',' '{print $5}')
                                nextionSerial=$(echo ${nextionData} | awk -F',' '{print $6}')
                                if [[ ${modemDevice} == *"USB"* ]]; then
                                        nextionPort="(USB) "
                                else
                                        nextionPort="(GPIO)"
                                fi
                                if [[ ${nextionTouch} ]]; then
                                        nextionTouch="Yes"
                                else
                                        nextionTouch="No"
                                fi
                                echo -e "Detected Nextion ${nextionPort}  : ${modemDevice} (Model: ${nextionModel} Serial: ${nextionSerial} Touch: ${nextionTouch})"

                        fi
                fi
        fi

        # Dump the temp file we used
        rm -rf /tmp/${randomFilename}
done

# Restart the service(s) if I stopped them
if [[ -v svcRestart ]]; then
        systemctl start ${svcRestart} > /dev/null 2>&1
fi
