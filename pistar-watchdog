#!/usr/bin/python

###############################################################################
#                                                                             #
#                         Pi-Star Service Watchdog                            #
#                                                                             #
#    Version 1.3, Code, Design and Development by Andy Taylor (MW0MWZ).       #
#                                                                             #
#   The service watchdog will monitor the D-Star Services, restarting them    #
#       after any kind of failures - somthing that seems to happen alot       #
#                       when using the G4KLX software                         #
#                                                                             #
###############################################################################

import subprocess
import time
import os

time.sleep(120) #Assumiing the Pi has just started up, let the services settle...

while True: #Main loop
	checkprocirc = subprocess.Popen('pgrep' + ' ircddbgatewayd', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocirc.stdout.readlines():
		os.system('/bin/systemctl stop ircddbgateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start ircddbgateway.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocdstar = subprocess.Popen('pgrep' + ' dstarrepeaterd', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocdstar.stdout.readlines():
		os.system('/bin/systemctl stop dstarrepeater.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start dstarrepeater.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocmmdvm = subprocess.Popen('pgrep' + ' MMDVMHost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocmmdvm.stdout.readlines():
		os.system('/bin/systemctl stop mmdvmhost.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start mmdvmhost.service')
		time.sleep(10) #Give the service time to start before we move on
		
	checkprocdmrgateway = subprocess.Popen('pgrep' + ' DMRGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocdmrgateway.stdout.readlines():
		os.system('/bin/systemctl stop dmrgateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start dmrgateway.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocysfgateway = subprocess.Popen('pgrep' + ' YSFGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocysfgateway.stdout.readlines():
		os.system('/bin/systemctl stop ysfgateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start ysfgateway.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocp25gateway = subprocess.Popen('pgrep' + ' P25Gateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocp25gateway.stdout.readlines():
		os.system('/bin/systemctl stop p25gateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start p25gateway.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocysfparrot = subprocess.Popen('pgrep' + ' YSFParrot', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocysfparrot.stdout.readlines():
		os.system('/bin/systemctl stop ysfparrot.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start ysfparrot.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocp25parrot = subprocess.Popen('pgrep' + ' P25Parrot', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocp25parrot.stdout.readlines():
		os.system('/bin/systemctl stop p25parrot.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start p25parrot.service')
		time.sleep(10) #Give the service time to start before we move on

	checkprocremote = subprocess.Popen('pgrep' + ' -f' + ' /usr/local/sbin/pistar-remote', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocremote.stdout.readlines():
		os.system('/bin/systemctl stop pistar-remote.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start pistar-remote.service')
		time.sleep(10) #Give the service time to start before we move on
		
	checkproctime = subprocess.Popen('pgrep' + ' timeserverd', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkproctime.stdout.readlines():
		os.system('/bin/systemctl stop timeserver.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start timeserver.service')
		time.sleep(10) #Give the service time to start before we move on

#	checkprockeeper = subprocess.Popen('pgrep' + ' pistar-keeper', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#	if not checkprockeeper.stdout.readlines():
#		os.system('service pistar-keeper start')
#		time.sleep(10) #Give the service time to start before we move on

	time.sleep(300) #Time to wait between service checks
